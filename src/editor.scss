@use "blocks";
@use "../vendor/doubleedesign/comet-components-core/src/components/variables" as *;
@use "../vendor/doubleedesign/comet-components-core/src/components/PageHeader/page-header" as *;

// In the editor, make the page title section resemble the PageHeader component
// It won't always be the same because it won't have the breadcrumbs,
// and site-specific overrides may be needed, but this is a start
.editor-visual-editor__post-title-wrapper {
	max-width: map-get($widths, 'contained');
	margin: 0 auto;
	padding: 0.707rem;
	@extend .page-header;
}

// The rest of this file compiles component CSS adjusted for the WordPress block editor,
// to be loaded only in the back-end.
// When I say "adjusted", that should just be for core components because we don't control their default HTML.
@each $colorName, $value in $colors {
	.has-#{$colorName}-background-color {
		background-color: var(--color-#{$colorName});
		color: var(--readable-color-#{$colorName});
	}

	@each $colorName2, $value in $colors {
		.has-#{$colorName}-#{$colorName2}-gradient-background {
			background: linear-gradient(180deg, var(--color-#{$colorName}) 0%, var(--color-#{$colorName}) 50%, var(--color-#{$colorName2}) 50%, var(--color-#{$colorName2}) 100%);
		}
	}
}

.wp-block-comet-container {
	@extend .page-section;
}

.wp-block-buttons {
	@extend .button-group;
}

.wp-block-paragraph {
	margin-block: var(--spacing-sm) !important;
	line-height: 1.4;
}

// Hack to fix .wp-core-ui .button overriding our .button in the block editor (though strangely it doesn't happen in the pattern editor)
.block-editor-inner-blocks .button {
	color: inherit;
	border-color: inherit;
	border-radius: var(--button-border-radius);
	font-size: inherit;
	line-height: 1;
	padding: var(--spacing-sm) var(--spacing-xl) var(--spacing-xs);
	min-height: unset;
	font-family: var(--font-family-body);
	font-size: 1rem;

	&[class$="--outline"] {
		background: none;
	}

	@each $colorName, $value in $colors {
		&.button--#{$colorName}--outline {
			color: var(--color-#{$colorName});
			border-color: var(--color-#{$colorName});
		}
	}
}

.wp-block-button__link {
	padding: 0 !important;
	border: 0 !important;
	border-radius: 0 !important;
}

// flex layout support is used solely to enable the orientation setting in the editor,
// but it then breaks the visual layout so we need to hack it here
.wp-block-comet-panels-is-layout-flex {
	display: block !important;
}

.accordion {
	details {
		> .block-editor-inner-blocks,
		> .block-editor-inner-blocks > .block-editor-block-list__layout {
			display: contents;
		}
	}
}

.tabs {
	// Note: In the editor, the output is not quite the same as in the final rendering
	// Most notably, the tablist is not a single grouped list like the Comet rendering constructs
	// - it's basically like each panel is its own instance.

	.block-editor-block-list__layout {
		margin-bottom: 1rem;
	}

	&[data-orientation="vertical"] {
		.block-editor-block-list__layout {
			display: flex;
			flex-wrap: nowrap;

			.tabs__tab-list {
				width: 200px;
				flex-basis: 200px;
			}

			.tab__panel__content {
				flex-grow: 1;
			}

			.tabs__content__tab-panel {
				display: block !important;
			}
		}
	}
}

.wp-block-comet-steps {
	> .block-editor-inner-blocks {
		display: contents;

		> .block-editor-block-list__layout {
			display: contents;
		}
	}

	&.is-style-numbered {
		@extend .steps--numbered;
	}

	.wp-block-comet-step {
	}
}

.wp-block-pullquote {
	padding: 0;

	blockquote {
		@extend .pullquote;
	}
}

:where(.editor-styles-wrapper) p, li {
	line-height: inherit !important;
	font-size: 1rem;
	font-family: var(--font-family-body);
}

.wp-submenu {
	margin-inline-start: 0;
}
